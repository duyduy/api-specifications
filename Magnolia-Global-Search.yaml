openapi: 3.0.1
info:
  title: MAG Product API
  description: A MAG Product API
  contact:
    name: Relationshop
    email: ''
  license:
    name: Use Mercatus licence
  version: v2
paths:
  /product/v2.0/api/search:
    post:
      tags:
        - Search
      summary: 'Search for products based on different criteria such as keywords, categories, brands, etc.'
      description: "Search for products based on different criteria such as keywords, categories, brands, etc.\r\n\r\n**Zero Result Behavior:** If a search yields no results, the API will switch the operator from AND to OR. For example:\r\n\r\nA search with the keyword \"Deer Park, Spring Water, 100% Natural rice\" will initially send a request with \"Deer\" AND \"Park\" AND \"Spring\" AND \"Water\" AND \"100%\" AND \"Natural\" AND \"rice\" to Elasticsearch.\r\n\r\nIf no results are found, it will make a second call with \"Deer\" OR \"Park\" OR \"Spring\" OR \"Water\" OR \"100%\" OR \"Natural\" OR \"rice\".\r\n\r\n**Spell Check:** The search will return suggestions in the response to help correct the spelling of keywords. For example:\r\n\r\n- \"Redduced Fat\" -> \"reduced fat\"\r\n- \"chocalate\" -> \"chocolate\"\r\n- \"Tommato\" -> \"tomato\"\r\n\r\n**UPC Searching:** Supports leading zeros. For example, the keyword:\r\n\r\n- \"49000031652\"\r\n- \"0049000031652\"\r\n- \"049000031652\"\r\n\r\nwill return the product with UPC = \"00049000031652\".\r\n\r\n**Stop Words:** The search ignores common stop words. Example:\r\n\r\n\"Chicken and rice\" will return the same results as \"chicken rice\".\r\n\r\n**Sample request:**\r\n            \r\n    POST /search\r\n    {\r\n       \"Keyword\": \"rice\",\r\n       \"Categories\": [\"18080000000000000\"]\r\n    }"
      parameters:
        - name: TenantIdentify
          in: header
          description: Tenant Id
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid input
        '404':
          description: No results found
        '500':
          description: Internal server error
  /product/v2.0/api/search/filters:
    post:
      tags:
        - Search
      summary: The filter API has the same parameters as the search API.
      description: 'Initially, we had one search API for both facets and the product list. To improve speed by over 70%, we split it into two APIs: one for facets and one for the product list.'
      parameters:
        - name: TenantIdentify
          in: header
          description: Tenant Id
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SearchFiltersRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SearchFiltersRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/SearchFiltersRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SearchFiltersRequest'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid input
        '404':
          description: No results found
        '500':
          description: Internal server error
  /product/v2.0/api/search/autocomplete:
    post:
      tags:
        - Search
      parameters:
        - name: TenantIdentify
          in: header
          description: Tenant Id
      requestBody:
        content:
          application/json-patch+json:
            schema: {}
          application/json:
            schema: {}
          text/json:
            schema: {}
          application/*+json:
            schema: {}
      responses:
        '200':
          description: Success
  /product/v2.0/api/search/popular-searches:
    post:
      tags:
        - Search
      parameters:
        - name: TenantIdentify
          in: header
          description: Tenant Id
      requestBody:
        content:
          application/json-patch+json:
            schema: {}
          application/json:
            schema: {}
          text/json:
            schema: {}
          application/*+json:
            schema: {}
      responses:
        '200':
          description: Success
components:
  schemas:
    SearchFiltersRequest:
      type: object
      properties:
        keyword:
          type: string
          description: 'Keyword to search for. Elasticsearch will look in these product fields: title, description, UPC (GTIN), tags, categories, brand, size.'
          nullable: true
          example: rice
        language:
          type: string
          description: 'Language for the search results. Available values: en, es, fr, de, it, pt, zh, ja, ko, ru, ar. Default value: en. This affects the fields used for keyword searches.'
          nullable: true
          example: en
        categories:
          type: array
          items:
            type: string
          description: "Category to filter products. Supports multiple levels.\r\n\r\n**Example:** categories = [\"level1_id\",\"level2_id\",\"level3_id\"] means the search will include all documents in level3_id.\r\n\r\nThe level1_id and level2_id may not be necessary for the search result, but they are required for the filter API to maintain the format for easy understanding."
          nullable: true
          example:
            - level1_id
            - level2_id
            - level3_id
        brands:
          type: array
          items:
            type: string
          description: Brand to filter products. Matches the product's brands.
          nullable: true
          example:
            - Nike
            - Adidas
        minPrice:
          type: number
          description: Minimum price range filter.
          format: double
          nullable: true
          example: 10
        maxPrice:
          type: number
          description: Maximum price range filter.
          format: double
          nullable: true
          example: 200
        sortBy:
          type: string
          description: 'Field to sort by. Available values: price, popularity, rating.'
          nullable: true
          example: price
        order:
          type: string
          description: 'Sort order. Available values: asc, desc.'
          nullable: true
          example: asc
        promotions:
          type: array
          items:
            type: string
          description: Filter by promotions. Matches the product's deals.
          nullable: true
          example:
            - promotionId1
            - promotionId2
        departments:
          type: array
          items:
            type: string
          description: Filter by department. Matches the product's department.
          nullable: true
          example:
            - departmentId1
            - departmentId2
        dietaryInterest:
          type: array
          items:
            type: string
          description: Filter by dietary interest. Matches the product's tags.
          nullable: true
          example:
            - tagId1
            - tagId2
        ebtEligibility:
          type: boolean
          description: Filter by EBT eligibility. Matches the product's is_ebt_eligible.
          nullable: true
          example: true
        availableOnline:
          type: boolean
          description: Filter by availability online. Matches the product's is_display_only.
          nullable: true
          example: true
        page:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: Page number for pagination. Must be greater than 0.
          format: int32
          nullable: true
          example: 1
        pageSize:
          maximum: 2147483647
          minimum: 0
          type: integer
          description: Page size for pagination. Must be greater than or equal to 0.
          format: int32
          nullable: true
          example: 10
        optimizeQueriesEnabled:
          type: boolean
          description: Indicates whether to optimize queries.
          nullable: true
          example: true
        spellCheckEnabled:
          type: boolean
          description: Indicates whether spell check is enabled.
          example: true
        storeCode:
          type: string
          description: Store code to filter products by store. Matches the field "branch_id" of products.
          nullable: true
          example: storeId
        aggregationSize:
          type: object
          additionalProperties:
            type: integer
            format: int32
            nullable: true
          nullable: true
      additionalProperties: false
    SearchRequest:
      type: object
      properties:
        keyword:
          type: string
          description: 'Keyword to search for. Elasticsearch will look in these product fields: title, description, UPC (GTIN), tags, categories, brand, size.'
          nullable: true
          example: rice
        language:
          type: string
          description: 'Language for the search results. Available values: en, es, fr, de, it, pt, zh, ja, ko, ru, ar. Default value: en. This affects the fields used for keyword searches.'
          nullable: true
          example: en
        categories:
          type: array
          items:
            type: string
          description: "Category to filter products. Supports multiple levels.\r\n\r\n**Example:** categories = [\"level1_id\",\"level2_id\",\"level3_id\"] means the search will include all documents in level3_id.\r\n\r\nThe level1_id and level2_id may not be necessary for the search result, but they are required for the filter API to maintain the format for easy understanding."
          nullable: true
          example:
            - level1_id
            - level2_id
            - level3_id
        brands:
          type: array
          items:
            type: string
          description: Brand to filter products. Matches the product's brands.
          nullable: true
          example:
            - Nike
            - Adidas
        minPrice:
          type: number
          description: Minimum price range filter.
          format: double
          nullable: true
          example: 10
        maxPrice:
          type: number
          description: Maximum price range filter.
          format: double
          nullable: true
          example: 200
        sortBy:
          type: string
          description: 'Field to sort by. Available values: price, popularity, rating.'
          nullable: true
          example: price
        order:
          type: string
          description: 'Sort order. Available values: asc, desc.'
          nullable: true
          example: asc
        promotions:
          type: array
          items:
            type: string
          description: Filter by promotions. Matches the product's deals.
          nullable: true
          example:
            - promotionId1
            - promotionId2
        departments:
          type: array
          items:
            type: string
          description: Filter by department. Matches the product's department.
          nullable: true
          example:
            - departmentId1
            - departmentId2
        dietaryInterest:
          type: array
          items:
            type: string
          description: Filter by dietary interest. Matches the product's tags.
          nullable: true
          example:
            - tagId1
            - tagId2
        ebtEligibility:
          type: boolean
          description: Filter by EBT eligibility. Matches the product's is_ebt_eligible.
          nullable: true
          example: true
        availableOnline:
          type: boolean
          description: Filter by availability online. Matches the product's is_display_only.
          nullable: true
          example: true
        page:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: Page number for pagination. Must be greater than 0.
          format: int32
          nullable: true
          example: 1
        pageSize:
          maximum: 2147483647
          minimum: 0
          type: integer
          description: Page size for pagination. Must be greater than or equal to 0.
          format: int32
          nullable: true
          example: 10
        optimizeQueriesEnabled:
          type: boolean
          description: Indicates whether to optimize queries.
          nullable: true
          example: true
        spellCheckEnabled:
          type: boolean
          description: Indicates whether spell check is enabled.
          example: true
        storeCode:
          type: string
          description: Store code to filter products by store. Matches the field "branch_id" of products.
          nullable: true
          example: storeId
      additionalProperties: false
      description: Represents a search request with various filters and options.
  securitySchemes:
    Bearer:
      type: http
      description: Bearer Authentication with JWT Token
      scheme: bearer
      bearerFormat: JWT
security:
  - Bearer: []
